"use strict";

const semver = require("semver");
<<<<<<< HEAD
const convert = require("./convert/index.cjs");
=======

const convert = require("./convert/index.cjs");

>>>>>>> 673f6c3a713c3c5a521125c5e4ea6135afefe034
const babelParser = require((((v, w) => (v = v.split("."), w = w.split("."), +v[0] > +w[0] || v[0] == w[0] && +v[1] >= +w[1]))(process.versions.node, "8.9") ? require.resolve : (r, {
  paths: [b]
}, M = require("module")) => {
  let f = M._findPath(r, M._nodeModulePaths(b).concat(b));
<<<<<<< HEAD
=======

>>>>>>> 673f6c3a713c3c5a521125c5e4ea6135afefe034
  if (f) return f;
  f = new Error(`Cannot resolve module '${r}'`);
  f.code = "MODULE_NOT_FOUND";
  throw f;
})("@babel/parser", {
  paths: [require.resolve("@babel/core/package.json")]
}));
<<<<<<< HEAD
let isRunningMinSupportedCoreVersion = null;
module.exports = function parse(code, options, client) {
  const minSupportedCoreVersion = ">=7.2.0";
  if (typeof isRunningMinSupportedCoreVersion !== "boolean") {
    isRunningMinSupportedCoreVersion = semver.satisfies(client.getVersion(), minSupportedCoreVersion);
  }
  if (!isRunningMinSupportedCoreVersion) {
    throw new Error(`@babel/eslint-parser@${"7.21.3"} does not support @babel/core@${client.getVersion()}. Please upgrade to @babel/core@${minSupportedCoreVersion}.`);
  }
=======

let isRunningMinSupportedCoreVersion = null;

module.exports = function parse(code, options, client) {
  const minSupportedCoreVersion = ">=7.2.0";

  if (typeof isRunningMinSupportedCoreVersion !== "boolean") {
    isRunningMinSupportedCoreVersion = semver.satisfies(client.getVersion(), minSupportedCoreVersion);
  }

  if (!isRunningMinSupportedCoreVersion) {
    throw new Error(`@babel/eslint-parser@${"7.19.1"} does not support @babel/core@${client.getVersion()}. Please upgrade to @babel/core@${minSupportedCoreVersion}.`);
  }

>>>>>>> 673f6c3a713c3c5a521125c5e4ea6135afefe034
  const {
    ast,
    parserOptions
  } = client.maybeParse(code, options);
  if (ast) return ast;
<<<<<<< HEAD
=======

>>>>>>> 673f6c3a713c3c5a521125c5e4ea6135afefe034
  try {
    return convert.ast(babelParser.parse(code, parserOptions), code, client.getTokLabels(), client.getVisitorKeys());
  } catch (err) {
    throw convert.error(err);
  }
};

//# sourceMappingURL=parse.cjs.map
